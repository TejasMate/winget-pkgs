# Created with komac v2.12.0
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.10.0.schema.json

PackageIdentifier: Intel.PresentMon.Console
PackageVersion: 2.3.1
PackageLocale: en-US
Publisher: Intel Corporation
PublisherUrl: https://www.intel.com/
PublisherSupportUrl: https://github.com/GameTechDev/PresentMon/issues
PrivacyUrl: https://www.intel.com/content/www/us/en/privacy/intel-privacy-notice.html
Author: Intel Corporation
PackageName: PresentMon Console
PackageUrl: https://github.com/GameTechDev/PresentMon
License: MIT
LicenseUrl: https://github.com/GameTechDev/PresentMon/blob/HEAD/LICENSE.txt
Copyright: Copyright (C) 2017-2024 Intel Corporation
CopyrightUrl: https://github.com/GameTechDev/PresentMon/blob/v2.3.0/LICENSE.txt
ShortDescription: A telemetry application to monitor and measure graphics applications.
Description: A standalone console application that uses the PresentMon SDK to capture and analyze graphics applications, outputting data to the console and/or CSV file(s).
Moniker: presentmon-console
Tags:
- analysis
- capture
- console
- event-tracing
- gaming
- graphics
- intel
- performance
- telemetry
ReleaseNotes: |-
  New Features
  - Introduced three new FPS overlay indicators to provide a clearer picture of frame delivery behavior, especially in scenarios involving frame generation. FPS-Presents measures how often frames are presented to the GPU, while FPS-Display captures the rate at which frames are actually shown on screen. FPS-App typically matches FPS-Presents except in frame generation scenarios.
  - Added the following GPU telemetry metrics (currently supported by Intel Arc Battlemage GPUs):
    - GPU Effective Frequency
    - GPU Voltage Regulator Temperature
    - GPU Memory Effective Bandwidth
    - GPU Overvoltage Percent
    - GPU Temperature Percent
    - GPU Power Percent
    - GPU Fan Speed Percent
    - GPU Card Power (total board power)
  - Reintroduced support for several timing metrics in the CSV, including MsBetweenPresents, MsBetweenDisplayChange, MsInPresent, MsRenderPresentLatency, and MsUntilDisplayed. MsBetweenSimulationStart and MsPCLatency are also included in the schema but are currently disabled until underlying event support is enabled.
  - Added CLI option to disable overlay alpha blending (reduces overlay impact on target present timing seen in some circumstances)
  - Added support to PresentMon console application for detection of Hybrid Presents
  - Increased default PresentMon circular buffer size to 2048 to be able to handle higher FPS applications. In addition added a command line parameter to be able to manually configure buffer size.
  - Stabilized binary version compatibility of PresentMon API by deploying PresentMonAPI.dll side-by-side with the service and moving to a dynamic loading model
  - Added Loader .dll + static import .lib to facilitate discovery and endpoint resolution of the PresentMon API
  - Added ETL trimmer utility for trimming ETL files to a timestamp range and pruning unnecessary event types (source only, currently no binary distribution provided)
  Experimental
  - Added ability to inject executable code into the target process to cause a flash to be drawn in-game whenever the mouse is clicked (intended for use in conjunction with specialized optical measuring instruments)
  Security and Lifecycle
  - Re-engineered multi-process architecture to enable PresentMon to be run without Administrator privileges
  - Improved security by ensuring that Chromium UI frontend runs at lowered integrity even when PresentMon is run elevated
  - Upgraded frontend from Vue.js 2 (past end-of-life and unsupported) & Vuex => Vue.js 3 & Pinia
ReleaseNotesUrl: https://github.com/GameTechDev/PresentMon/releases/tag/v2.3.1
ManifestType: defaultLocale
ManifestVersion: 1.10.0
